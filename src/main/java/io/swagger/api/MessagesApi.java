/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Message;
import io.swagger.model.MessageInput;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-21T22:00:36.997790207Z[GMT]")
@Validated
public interface MessagesApi {

    @Operation(summary = "Create a new message", description = "", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Message created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request") })
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Message> createMessage(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody MessageInput body);


    @Operation(summary = "Delete a message", description = "", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Message deleted"),
        
        @ApiResponse(responseCode = "404", description = "Message not found") })
    @RequestMapping(value = "/messages/{messageId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteMessage(@Parameter(in = ParameterIn.PATH, description = "ID of the message to delete", required=true, schema=@Schema()) @PathVariable("messageId") Long messageId);


    @Operation(summary = "Get a message by ID", description = "", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Message retrieved", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "404", description = "Message not found") })
    @RequestMapping(value = "/messages/{messageId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Message> getMessageById(@Parameter(in = ParameterIn.PATH, description = "ID of the message to retrieve", required=true, schema=@Schema()) @PathVariable("messageId") Long messageId);


    @Operation(summary = "Get a list of messages", description = "", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of messages", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Message.class)))) })
    @RequestMapping(value = "/messages",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Message>> getMessages();


    @Operation(summary = "Update a message", description = "", tags={ "messages" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Message updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Message.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request"),
        
        @ApiResponse(responseCode = "404", description = "Message not found") })
    @RequestMapping(value = "/messages/{messageId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Message> updateMessage(@Parameter(in = ParameterIn.PATH, description = "ID of the message to update", required=true, schema=@Schema()) @PathVariable("messageId") Long messageId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody MessageInput body);

}

